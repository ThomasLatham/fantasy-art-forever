// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// An item in the queue for posting to Instagram. Queue is implemented so that the application can
/// have one cronjob for scraping Reddit and another for posting to Instagram. 
/// The reason for this is twofold: 
/// 1.) We don't want go over the time limit for a Vercel serverless function on the hobby plan (10
/// seconds). 
/// 2.) We want to have backup Reddit posts in case something goes wrong during scraping, for the
/// sake of high availability for our application.
model QueuedInstagramPost {
  id                   String   @id @default(cuid()) /// Uniquely identifies a queue item.
  redditPostId         String   @unique /// The URL of the post from Reddit (in the INE).
  subredditDisplayName String /// The subreddit where the post was submitted.
  redditOP             String /// The username of the user who created the Reddit post.
  artworkTitle         String /// The title of the artwork that is the subject of the post.
  artistName           String /// The name of the artist who created the artwork.
  linkToArtworkSource  String /// A link to source of the artwork, for attribution purposes.
  artworkImageUrl      String /// The URL of the artwork that will be used for posting to Instagram (must be JPEG).
  isBackup             Boolean /// If `true`, then this post is a backup post in case something is wrong with a regular queued post.
  createdAt            DateTime @default(now()) /// Indicates when this item was added to the queue.
}

/// Keeps track of the posts we've submitted to Instagram. Maybe will be used for data analysis at
/// some point. Could also end up being redundant/unnecessary since we can probably just hit the
/// Instagram API to get our old posts' details.
model SubmittedInstagramPost {
  id              String @id @default(cuid()) /// Uniquely identifies a succesfully submitted Instagram post.
  redditPostId    String /// The ID of the post from Reddit (in the INE).
  instagramPostId String /// The ID of our post to Instagram.
}

/// A day in the posting schedule. There are seven `PostingScheduleDay`s, one for each day of the
/// week.
model PostingScheduleDay {
  id          Int    @id /// Corresponds to the weekday index: Sunday is 0, Monday is 1, etc.
  nickname    String /// The nickname for the posting day (e.g., "Magic Monday" or "Techno Tuesday").
  description String /// The description of the theme for the posting day.

  /// The list of the display names of the subreddits sourced for posting on this day (e.g.,
  /// ["ImaginaryWinterscapes", "ImaginarySpringscapes", "ImaginarySummerscapes",
  /// "ImaginaryAutumnscapes"]).
  subredditDisplayNames String[]

  /// If true, then the `subreddits` are cycled through for sourcing purposes. Otherwise, one
  /// subreddit is chosen each week at random.
  isCyclicalRotation Boolean

  /// The 0-based index in the `subreddits` list of the most recently sourced subreddit for posting
  /// purposes. Used for helping to determine the next subreddit to source from the `subreddits`
  /// field. 
  /// In the case that `isCyclicalRotation` is `true`, then we simply use the next index for
  /// sourcing.
  /// In the case that `isCyclicalRotation` is `false`, then we randomly select a subreddit from the
  /// list that is *not* the `lastSourcedSubreddit` so to avoid sourcing from the same subreddit two
  /// weeks in a row.
  lastSourcedSubreddit Int
}

/// A single-record table for storing values that need to be persisted for the application.
model PersistedValuesRecord {
  id                             String  @id @default(cuid()) /// Kind of pointless since this table is only supposed to have one record.
  postingTimeForToday            Int     @default(6) /// The time of day (6, 9, 12, 15, 18) in Eastern Time (America/New_York) to create a post on Instagram for the current day.
  hasPostingTimeBeenUpdatedToday Boolean @default(true) /// Value is `true` if the `postingTimeForToday` has already been updated today.
  hasPostBeenMadeToday           Boolean @default(false) /// Value is `true` if the we've already posted to Instagram today.
}
